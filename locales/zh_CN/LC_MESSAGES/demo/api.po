# SOME DESCRIPTIVE TITLE.
# Copyright (C) Dave Snider, Read the Docs, Inc. & contributors
# This file is distributed under the same license as the Read the Docs
# Sphinx Theme package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Read the Docs Sphinx Theme 1.0.1alpha1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-22 13:49+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../demo/api.rst:3
msgid "API documentation and generated content"
msgstr "API文档和生成的内容"

#: ../../demo/api.rst:5
msgid "Table of Contents"
msgstr "目录"

#: ../../demo/api.rst:8
msgid ":mod:`test_py_module`"
msgstr ""

#: of test_py_module.test:1
msgid "Test Module for sphinx_rtd_theme."
msgstr "sphinx_rtd_theme 的测试模块。"

#: of test_py_module.test.Foo:1
msgid "Docstring for class Foo."
msgstr "Foo 类的文件字符串。"

#: of test_py_module.test.Foo:3
msgid ""
"This text tests for the formatting of docstrings generated from output "
"``sphinx.ext.autodoc``. Which contain reST, but sphinx nests it in the "
"``<dl>``, and ``<dt>`` tags. Also, ``<tt>`` is used for class, method "
"names and etc, but those will *always* have the ``.descname`` or "
"``.descclassname`` class."
msgstr ""
"这段文字测试了从输出 ``sphinx.ext.autodoc`` 生成的文档字符串格式。其中包含 reST，但 Sphinx 将其嵌套在 "
"``<dl>`` 和 ``<dt>`` 标签中。另外，``<tt>`` 用于类，方法名等，但这些将有 ``.descname`` 或 "
"``.descclassname`` 类。"

#: of test_py_module.test.Foo:9
msgid ""
"Normal ``<tt>`` (like the <tt> I just wrote here) needs to be shown with "
"the same style as anything else with ````this type of markup````."
msgstr ""

#: of test_py_module.test.Foo:12
msgid ""
"It's common for programmers to give a code example inside of their "
"docstring::"
msgstr ""

#: of test_py_module.test.Foo:24
msgid ""
"Here is a link to :py:meth:`capitalize`. Here is a link to "
":py:meth:`__init__`."
msgstr ""

#: of test_py_module.test.Foo.__init__:1
msgid "Start the Foo."
msgstr ""

#: ../../demo/api.rst of test_py_module.test.Foo.__init__
#: test_py_module.test.Foo.add test_py_module.test.Foo.another_function
#: test_py_module.test.Foo.capitalize
msgid "参数"
msgstr ""

#: of test_py_module.test.Foo.__init__:3
msgid "The first argument to initialize class."
msgstr ""

#: of test_py_module.test.Foo.__init__:5
msgid "Spam me yes or no..."
msgstr ""

#: ../../docstring of test_py_module.test.Foo.__weakref__:1
msgid "list of weak references to the object (if defined)"
msgstr ""

#: of test_py_module.test.Foo.add:1
msgid "Return the added values."
msgstr ""

#: of test_py_module.test.Foo.add:3
msgid "First number to add."
msgstr ""

#: of test_py_module.test.Foo.add:5
msgid "Second number to add."
msgstr ""

#: of test_py_module.test.Foo.add test_py_module.test.Foo.another_function
#: test_py_module.test.Foo.capitalize
msgid "返回类型"
msgstr ""

#: of test_py_module.test.Foo.another_function:1
msgid "Here is another function."
msgstr ""

#: of test_py_module.test.Foo.another_function:3
msgid "The number of green hats you own."
msgstr ""

#: of test_py_module.test.Foo.another_function:6
msgid "The number of non-green hats you own."
msgstr ""

#: of test_py_module.test.Foo.another_function:9
msgid ""
"Additional keyword arguments. Each keyword parameter should specify the "
"name of your favorite cuisine. The values should be floats, specifying "
"the mean price of your favorite dish in that cooking style."
msgstr ""

#: of test_py_module.test.Foo.another_function
msgid "返回"
msgstr ""

#: of test_py_module.test.Foo.another_function:15
msgid ""
"A 2-tuple.  The first element is the mean price of all dishes across "
"cuisines.  The second element is the total number of hats you own: "
":math:`a + b`."
msgstr ""

#: of test_py_module.test.Foo.another_function
msgid "引发"
msgstr ""

#: of test_py_module.test.Foo.another_function:20
msgid "When ``a`` is not an integer."
msgstr ""

#: of test_py_module.test.Foo.another_function:22
msgid "This was added in 1.0"
msgstr ""

#: of test_py_module.test.Foo.another_function:24
msgid "This was changed in 2.0"
msgstr ""

#: of test_py_module.test.Foo.another_function:26
msgid "This is deprecated since 3.0"
msgstr ""

#: ../../docstring of test_py_module.test.Foo.bar:1
msgid "Doc comment for class attribute Foo.bar. It can have multiple lines."
msgstr ""

#: ../../docstring of test_py_module.test.Foo.baz:1
msgid "Docstring for class attribute Foo.baz."
msgstr ""

#: of test_py_module.test.Foo.capitalize:1
msgid "Return a string as uppercase."
msgstr ""

#: of test_py_module.test.Foo.capitalize:3
msgid "String to change"
msgstr ""

#: ../../docstring of test_py_module.test.Foo.flox:1
msgid "Doc comment for Foo.flox. One line only."
msgstr ""

#: ../../docstring of test_py_module.test.Foo.qux:1
msgid "Doc comment for instance attribute qux."
msgstr ""

#: ../../docstring of test_py_module.test.Foo.spam:1
msgid "Docstring for instance attribute spam."
msgstr ""

#: ../../demo/api.rst:17
msgid "C++ API"
msgstr ""

#: ../../demo/api.rst:21
msgid "Some type"
msgstr ""

#: ../../demo/api.rst:25
msgid "Some function type thing"
msgstr ""

#: ../../demo/api.rst:29
msgid "Some cpp class"
msgstr ""

#: ../../demo/api.rst:33
msgid "The description of Sphinx::version."
msgstr ""

#: ../../demo/api.rst:37
msgid "The description of version."
msgstr ""

#: ../../demo/api.rst:41
msgid "The description of List type."
msgstr ""

#: ../../demo/api.rst:45
msgid "An unscoped enum."
msgstr ""

#: ../../demo/api.rst:51
msgid "A scoped enum."
msgstr ""

#: ../../demo/api.rst:57
msgid ""
"A scoped enum with non-default visibility, and with a specified "
"underlying type."
msgstr ""

#: ../../demo/api.rst:63
msgid "JavaScript API"
msgstr ""

#: ../../demo/api.rst:69 ../../demo/api.rst:86
msgid "Link to :js:class:`ModTopLevel`"
msgstr ""

#: ../../demo/api.rst:73
msgid "Link to :js:meth:`mod_child_1`"
msgstr ""

#: ../../demo/api.rst:74
msgid "Link to :js:meth:`ModTopLevel.mod_child_1`"
msgstr ""

#: ../../demo/api.rst:78
msgid "Link to :js:meth:`mod_child_2`"
msgstr ""

#: ../../demo/api.rst:82
msgid "Link to :js:meth:`module_a.submodule.ModTopLevel.mod_child_1`"
msgstr ""

#: ../../demo/api.rst:92
msgid "Link to :js:meth:`nested_child_2`"
msgstr ""

#: ../../demo/api.rst:96
msgid "Link to :js:meth:`nested_child_1`"
msgstr ""

#: ../../demo/api.rst:100
msgid "Generated Index"
msgstr ""

#: ../../demo/api.rst:102
msgid ""
"Part of the sphinx build process in generate and index file: "
":ref:`genindex`."
msgstr ""

#: ../../demo/api.rst:106
msgid "Optional parameter args"
msgstr ""

#: ../../demo/api.rst:108
msgid ""
"At this point optional parameters `cannot be generated from code`_. "
"However, some projects will manually do it, like so:"
msgstr ""

#: ../../demo/api.rst:111
msgid "This example comes from `django-payments module docs`_."
msgstr ""

#: ../../demo/api.rst:115
msgid ""
"This backend implements payments using a popular Polish gateway, "
"`Dotpay.pl <http://www.dotpay.pl>`_."
msgstr ""

#: ../../demo/api.rst:117
msgid ""
"Due to API limitations there is no support for transferring purchased "
"items."
msgstr ""

#: ../../demo/api.rst:120
msgid "Seller ID assigned by Dotpay"
msgstr ""

#: ../../demo/api.rst:121
msgid "PIN assigned by Dotpay"
msgstr ""

#: ../../demo/api.rst:122
msgid "Default payment channel (consult reference guide)"
msgstr ""

#: ../../demo/api.rst:123
msgid "UI language"
msgstr ""

#: ../../demo/api.rst:124
msgid "Whether to disable channels other than the default selected above"
msgstr ""

#: ../../demo/api.rst:131
msgid "Data"
msgstr ""

#: ../../demo/api.rst:137
msgid ""
"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce congue "
"elit eu hendrerit mattis."
msgstr ""

#: ../../demo/api.rst:139
msgid "Some data link :data:`Data_item_1`."
msgstr ""

#~ msgid "Parameters"
#~ msgstr ""

#~ msgid "Return type"
#~ msgstr ""

#~ msgid "Returns"
#~ msgstr ""

#~ msgid "Raises"
#~ msgstr ""

